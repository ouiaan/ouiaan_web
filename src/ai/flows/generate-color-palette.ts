
'use server';

/**
 * @fileOverview A color palette and color grading generation AI agent.
 *
 * - generateColorPalette - A function that handles the color palette and tonal palette generation process.
 * - GenerateColorPaletteInput - The input type for the generateColorpalette function.
 * - GenerateColorPaletteOutput - The return type for the generateColorPalette function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const TonalPaletteColorInputSchema = z.object({
  color: z.string().describe("The hex code for this tonal range."),
  description: z.string().optional().describe("An optional description."),
});

const TonalPaletteInputSchema = z.object({
  shadows: TonalPaletteColorInputSchema,
  midtones: TonalPaletteColorInputSchema,
  highlights: TonalPaletteColorInputSchema,
});

const GenerateColorPaletteInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo to generate a color palette from, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
   tonalPalette: TonalPaletteInputSchema.optional().describe("An optional user-provided tonal palette to guide the analysis."),
});
export type GenerateColorPaletteInput = z.infer<typeof GenerateColorPaletteInputSchema>;

const TonalPaletteColorSchema = z.object({
  description: z.string().describe("A brief, professional analysis of why this color was chosen for this tonal range and its effect on the image's mood."),
  color: z.string().describe("The hex code generated by the AI for this tonal range."),
});

const HSLAdjustmentSchema = z.object({
    colorName: z.string().describe("A user-friendly name for the color being adjusted (e.g., 'Sky Blue', 'Foliage Green', 'Skin Tones')."),
    hex: z.string().describe("The representative hex code of this color in the image."),
    hueShift: z.string().describe("The recommended hue shift value (e.g., '+8', '-5')."),
    saturation: z.string().describe("The recommended saturation adjustment value (e.g., '-15', '+10')."),
    luminance: z.string().describe("The recommended luminance adjustment value (e.g., '+5', '-20')."),
    reasoning: z.string().describe("A professional justification explaining how these HSL adjustments contribute to the desired look and feel.")
});

const GenerateColorPaletteOutputSchema = z.object({
  colorPalette: z.array(z.string()).describe('An array of 5 key color palette hex codes extracted from the image.'),
  tonalPalette: z.object({
      shadows: TonalPaletteColorSchema.describe("The generated color and analysis for the shadows (darkest areas)."),
      midtones: TonalPaletteColorSchema.describe("The generated color and analysis for the midtones (middle grey areas)."),
      highlights: TonalPaletteColorSchema.describe("The generated color and analysis for the highlights (brightest areas)."),
    }).describe("A generated 3-color palette designed for a subtle, professional color grade, suitable for RGB curves."),
  hslAdjustments: z.array(HSLAdjustmentSchema).length(3).describe("An array of actionable HSL (Hue, Saturation, Luminance) adjustment recommendations for the 3 most dominant and important colors in the image.")
});
export type GenerateColorPaletteOutput = z.infer<typeof GenerateColorPaletteOutputSchema>;

export async function generateColorPalette(input: GenerateColorPaletteInput): Promise<GenerateColorPaletteOutput> {
  return generateColorPaletteFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateColorPalettePrompt',
  input: {schema: GenerateColorPaletteInputSchema},
  output: {schema: GenerateColorPaletteOutputSchema},
  prompt: `You are a professional digital image technician and expert colorist. Your task is to analyze an image and generate a complete, actionable color grading report.

**Your Task:**

1.  **Extract a General Palette:** Analyze the provided image and extract an array of 5 key color palette hex codes. This is a general overview of the image's most prominent colors.

2.  **Generate a Tonal Palette for Grading:** 
    {{#if tonalPalette}}
    A tonal palette has been provided by the user. Your primary task is to use these exact colors. For each provided color (shadows, midtones, highlights), you MUST:
    - Use the provided hex code as the 'color' in your output. DO NOT change it.
    - Write a brief, professional analysis for the 'description' field, explaining the effect this user-chosen color will have on the image's mood and feel. Justify why it's a good choice for its respective tonal range (shadows, midtones, or highlights).

    **User-Provided Tonal Palette:**
    - Shadows: {{tonalPalette.shadows.color}}
    - Midtones: {{tonalPalette.midtones.color}}
    - Highlights: {{tonalPalette.highlights.color}}
    {{else}}
    Create a 3-color palette specifically for a subtle, professional color grade (like one you would create using RGB curves). This palette should define the tint for the shadows, midtones, and highlights.
    *   **Guiding Principle:** The goal is a **subtle tint**, not an overpowering color cast. The generated colors should represent a gentle push in a certain direction, suitable for creating a cinematic mood. They should be close to neutral gray but with a specific hue. Avoid overly saturated or intense colors.
    *   **For Shadows:** Propose a hex color that will tint the darkest parts of the image.
    *   **For Midtones:** Propose a hex color for the mid-range. This should reflect the *overall tonality*, not a specific color from the image.
    *   **For Highlights:** Propose a hex color for the brightest parts, often complementing the shadow tint.
    
    **For each color in the Tonal Palette, provide:**
    *   **color:** The hex code you generated.
    *   **description:** A brief, professional analysis of *why* you chose this color and the effect it will have on the image's mood.
    {{/if}}

3.  **Perform an HSL Primary Color Analysis:** This is a critical task for providing actionable advice.
    *   Identify the **3 most dominant and photographically important colors** in the image (e.g., skin tones, foliage greens, sky blues, etc.).
    *   For each of these three colors, provide specific HSL (Hue, Saturation, Luminance) adjustment recommendations to achieve a professional, cinematic look.
    *   For each color, you must populate the following fields:
        *   **colorName:** A simple, descriptive name (e.g., "Sky Blue").
        *   **hex:** A representative hex code for that color.
        *   **hueShift:** A recommended numerical shift (e.g., "+8", "-5").
        *   **saturation:** A recommended numerical adjustment (e.g., "-15", "+10").
        *   **luminance:** A recommended numerical adjustment (e.g., "+5", "-20").
        *   **reasoning:** A professional justification explaining *why* these specific HSL adjustments are being recommended and how they contribute to the overall aesthetic (e.g., "Shifting the blues towards cyan and reducing saturation gives the sky a more cinematic, less digital feel.").

**Input Image:** {{media url=photoDataUri}}

Respond in JSON format.`,
});

const generateColorPaletteFlow = ai.defineFlow(
  {
    name: 'generateColorPaletteFlow',
    inputSchema: GenerateColorPaletteInputSchema,
    outputSchema: GenerateColorPaletteOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    // Ensure the output respects the user's input colors if they were provided.
    if (input.tonalPalette && output) {
        output.tonalPalette.shadows.color = input.tonalPalette.shadows.color;
        output.tonalPalette.midtones.color = input.tonalPalette.midtones.color;
        output.tonalPalette.highlights.color = input.tonalPalette.highlights.color;
    }
    return output!;
  }
);

    